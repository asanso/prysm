// Code generated by fastssz. DO NOT EDIT.
// Hash: 89b5118c9cc9dd005bd0262f0f7cd6216160c08a4f09d1bf8cd9408fe9960500
package ssz_generic

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the SmallTestStruct object
func (s *SmallTestStruct) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SmallTestStruct object to a target array
func (s *SmallTestStruct) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(0)

	return
}

// UnmarshalSSZ ssz unmarshals the SmallTestStruct object
func (s *SmallTestStruct) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 0 {
		return ssz.ErrSize
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SmallTestStruct object
func (s *SmallTestStruct) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the SmallTestStruct object
func (s *SmallTestStruct) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SmallTestStruct object with a hasher
func (s *SmallTestStruct) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the FixedTestStruct object
func (f *FixedTestStruct) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(f)
}

// MarshalSSZTo ssz marshals the FixedTestStruct object to a target array
func (f *FixedTestStruct) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(0)

	return
}

// UnmarshalSSZ ssz unmarshals the FixedTestStruct object
func (f *FixedTestStruct) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 0 {
		return ssz.ErrSize
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the FixedTestStruct object
func (f *FixedTestStruct) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the FixedTestStruct object
func (f *FixedTestStruct) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(f)
}

// HashTreeRootWith ssz hashes the FixedTestStruct object with a hasher
func (f *FixedTestStruct) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the VarTestStruct object
func (v *VarTestStruct) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the VarTestStruct object to a target array
func (v *VarTestStruct) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(0)

	return
}

// UnmarshalSSZ ssz unmarshals the VarTestStruct object
func (v *VarTestStruct) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 0 {
		return ssz.ErrSize
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the VarTestStruct object
func (v *VarTestStruct) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the VarTestStruct object
func (v *VarTestStruct) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the VarTestStruct object with a hasher
func (v *VarTestStruct) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the ComplexTestStruct object
func (c *ComplexTestStruct) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the ComplexTestStruct object to a target array
func (c *ComplexTestStruct) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(0)

	return
}

// UnmarshalSSZ ssz unmarshals the ComplexTestStruct object
func (c *ComplexTestStruct) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 0 {
		return ssz.ErrSize
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ComplexTestStruct object
func (c *ComplexTestStruct) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the ComplexTestStruct object
func (c *ComplexTestStruct) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the ComplexTestStruct object with a hasher
func (c *ComplexTestStruct) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	hh.Merkleize(indx)
	return
}
